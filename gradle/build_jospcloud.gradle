/* *****************************************************************************
 * The John Operating System Project is the collection of software and configurations
 * to generate IoT EcoSystem, like the John Operating System Platform one.
 * Copyright (C) 2020 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 **************************************************************************** */

import com.robypomper.build.gradle.GradleUtils.PrintGradleVersion
import com.robypomper.build.java.JavaPublicationUtils
import com.robypomper.build.spring.SpringBuildUtils

/**
 * Gradle configurations to manage JCP components.
 *
 * Components list:
 * <ul>
 *     <li>
 *         JCP APIs Public
 *     </li>
 *     <li>
 *         JCP APIs
 *     </li>
 *     <li>
 *         JCP FE
 *     </li>
 * </ul>
 *
 * Summary:
 * <ul>
 *     <li>
 *         Components configs
 *     </li>
 *     <li>
 *         Runners Tasks
 *     </li>
 *     <li>
 *         Publication configs
 *     </li>
 *     <li>
 *         Publication tasks
 *     </li>
 * </ul>
 */


// ------------------
// Components configs
// ------------------

sourceSets {

    // JCP APIs Public
    jcpAPIsPublic {}

    // JCP APIs
    jcpAPIs {
        java {
            srcDirs 'src/jcpAPIs/java'
            srcDirs 'src/jospGWs/java'          // JOSP GWs is included in JCP APIs
        }
        resources {
            srcDirs 'src/jcpAPIs/resources'
            srcDirs 'src/jospGWs/resources'     // JOSP GWs is included in JCP APIs
        }
    }

    // JCP FE
    jcpFE {}

}

configurations {
    jcpAPIsImplementation.exclude module : 'spring-boot-starter-logging'
    jcpFEImplementation.exclude module : 'spring-boot-starter-logging'
}

dependencies {
    def excludeSwagger = {
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.swagger', module: 'swagger-models'
    }

    // JCP APIs Public dependencies
    jcpAPIsPublicImplementation "com.robypomper.josp:jospCommons:${project.ext.get("version.jospCommons")}"
    jcpAPIsPublicCompileOnly "org.projectlombok:lombok:${project.ext.get("version.lombok")}"                            // Lombok annotations
    jcpAPIsPublicAnnotationProcessor "org.projectlombok:lombok:${project.ext.get("version.lombok")}"

    // JCP APIs dependencies
    jcpAPIsImplementation "com.robypomper.josp:jcpAPIsPublic:${project.ext.get("version.jcpAPIsPublic")}"
    jcpAPIsCompileOnly "org.projectlombok:lombok:${project.ext.get("version.lombok")}"                                  // Lombok annotations
    jcpAPIsAnnotationProcessor "org.projectlombok:lombok:${project.ext.get("version.lombok")}"
    jcpAPIsImplementation 'org.springframework.boot:spring-boot-starter-web'
    jcpAPIsCompileOnly 'org.springframework.boot:spring-boot-devtools'
    jcpAPIsImplementation 'org.springframework.boot:spring-boot-starter-log4j2'                                         // Logger
    jcpAPIsImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'                                       // Database
    jcpAPIsImplementation 'mysql:mysql-connector-java'
    jcpAPIsImplementation 'org.springframework.boot:spring-boot-starter-security'                                       // SSL
    jcpAPIsImplementation 'org.springframework.security:spring-security-oauth2-jose'                                    // OAuth (Resource)
    jcpAPIsImplementation 'org.springframework.security:spring-security-oauth2-resource-server'
    jcpAPIsImplementation 'org.springframework.security:spring-security-oauth2-client'
    jcpAPIsImplementation 'org.keycloak:keycloak-spring-boot-starter'
    jcpAPIsImplementation "io.springfox:springfox-swagger2:${project.ext.get("version.swaggerSpring")}", excludeSwagger // Swagger support
    jcpAPIsImplementation "io.springfox:springfox-swagger-ui:${project.ext.get("version.swaggerSpring")}", excludeSwagger
    jcpAPIsImplementation "io.swagger:swagger-annotations:${project.ext.get("version.swagger")}"
    jcpAPIsImplementation "io.swagger:swagger-models:${project.ext.get("version.swagger")}"
    jcpAPIsImplementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${project.ext.get("version.jackson")}"
    jcpAPIsImplementation "com.robypomper.josp:jospJSL:${project.ext.get("version.jospJSL")}"                           // Required by JOSP GWs > GWObject

    // JCP FE
    jcpFEImplementation "com.robypomper.josp:jcpAPIsPublic:${project.ext.get("version.jcpAPIsPublic")}"
    jcpFECompileOnly "org.projectlombok:lombok:${project.ext.get("version.lombok")}"                                    // Lombok annotations
    jcpFEAnnotationProcessor "org.projectlombok:lombok:${project.ext.get("version.lombok")}"
    jcpFEImplementation "com.robypomper.josp:jospJSL:${project.ext.get("version.jospJSL")}"
    jcpFEImplementation 'org.springframework.boot:spring-boot-starter-web'
    jcpFECompileOnly 'org.springframework.boot:spring-boot-devtools'
    jcpFEImplementation 'org.springframework.boot:spring-boot-starter-log4j2'                                           // Logger
    jcpFEImplementation 'org.springframework.boot:spring-boot-starter-security'                                         // SSL support

}


// -------------
// Runners Tasks
// -------------

// Utils
task printGradleVersions(type: PrintGradleVersion)

// JCP APIs
SpringBuildUtils.makeSpringBootFromSourceSet(project,sourceSets.jcpAPIs,project.file('src/jcpApis/resources/log4j2_project.xml'))
tasks.bootJcpAPIsRun {
    workingDir('envs/runnables/jcp-apis')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpAPI_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpAPIsRun
}
task jcpAPI_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "envs/runnables/jcp-apis"

    //...delete and recreate jcp_api database in dbms
}
clean.dependsOn jcpAPI_Clean
bootJcpAPIsRun.dependsOn printGradleVersions

// JCP FE
SpringBuildUtils.makeSpringBootFromSourceSet(project,sourceSets.jcpFE,project.file('src/jcpFE/resources/log4j2_project.xml'))
tasks.bootJcpFERun  {
    workingDir('envs/runnables/jcp-fe')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpFE_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpFERun
}
task jcpFE_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete 'envs/runnables/jcp-fe'

    //...delete and recreate jcp_api database in dbms
}
clean.dependsOn jcpFE_Clean
bootJcpFERun.dependsOn printGradleVersions


// -------------------
// Publication configs
// -------------------

// JCP APIs Public
String jcpAPIsPublicName = 'JCP APIs Public'
String jcpAPIsPublicArtifact = 'jcpAPIsPublic'
String jcpAPIsPublicVersion = project.ext.get("version.jcpAPIsPublic_DEV")
def jcpAPIsPublicPubDesc = new JavaPublicationUtils.Descriptor(project,sourceSets.jcpAPIsPublic,jcpAPIsPublicName,jcpAPIsPublicArtifact,jcpAPIsPublicVersion)
        .setUrlsFromProject(project)
        .setLicenceGPLv3()
        .setArtifactOpens()
        .setGroupId((String)project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project,jcpAPIsPublicPubDesc)

// JCP APIs
String jcpAPIsName = 'JCP APIs'
String jcpAPIsArtifact = 'jcpAPIs'
String jcpAPIsVersion = project.ext.get("version.jcpAPIs_DEV")
def jcpAPIsPubDesc = new JavaPublicationUtils.Descriptor(project,sourceSets.jcpAPIs,jcpAPIsName,jcpAPIsArtifact,jcpAPIsVersion)
        .setUrlsFromProject(project)
        .setLicenceGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String)project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project,jcpAPIsPubDesc)

// JCP FE
String jcpFEName = 'JCP Front End'
String jcpFEArtifact = 'jcpFE'
String jcpFEVersion = project.ext.get("version.jcpFE_DEV")
def jcpFEPubDesc = new JavaPublicationUtils.Descriptor(project,sourceSets.jcpFE,jcpFEName,jcpFEArtifact,jcpFEVersion)
        .setUrlsFromProject(project)
        .setLicenceGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String)project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project,jcpFEPubDesc)


// -----------------
// Publication tasks
// -----------------

// JCP APIs Public
task jcpAPIsPublic_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpAPIsPublicPublicationToMavenLocal
}

// JCP APIs
task jcpAPIs_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpAPIsPublicationToMavenLocal
}

// JCP FE
task jcpFE_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpFEPublicationToMavenLocal
}
