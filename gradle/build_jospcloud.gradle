/* *****************************************************************************
 * The John Operating System Project is the collection of software and configurations
 * to generate IoT EcoSystem, like the John Operating System Platform one.
 * Copyright (C) 2020 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 **************************************************************************** */


import com.robypomper.build.gradle.GradleBuildInfo
import com.robypomper.build.gradle.GradleUtils.PrintGradleVersion
import com.robypomper.build.java.JavaPublicationUtils
import com.robypomper.build.spring.SpringBuildUtils
import com.robypomper.build.node.NodeBuildUtils

/**
 * Gradle configurations to manage JCP components.
 *
 * Components list:
 * <ul>
 *     <li>
 *         JCP APIs Public
 *     </li>
 *     <li>
 *         JCP APIs
 *     </li>
 *     <li>
 *         JCP FE
 *     </li>
 * </ul>
 *
 * Summary:
 * <ul>
 *     <li>
 *         Components configs
 *     </li>
 *     <li>
 *         Runners Tasks
 *     </li>
 *     <li>
 *         Publication configs
 *     </li>
 *     <li>
 *         Publication tasks
 *     </li>
 * </ul>
 */


// ------------------
// Components configs
// ------------------

sourceSets {

    // JCP Commons
    jcpCommons {}

    // JCP DB
    jcpDB {}

    // JCP DB APIs
    jcpDBAPIs {}

    // JCP DB FE
    jcpDBFE {}

    // JCP Service
    jcpService {}

    // JCP APIs
    jcpAPIs {}

    // JCP GWs
    jcpGWs {}

    // JCP JSL Web Bridge
    jcpJSLWebBridge {}

    // JCP FE
    jcpFE {
        resources {
             srcDir 'build/generated/resources/node/jcpFE'
        }
    }

    // JCP All
    jcpAll {}

}

configurations {

    jcpServiceImplementation.exclude module: 'spring-boot-starter-logging'
    jcpAPIsImplementation.exclude module: 'spring-boot-starter-logging'
    jcpGWsImplementation.exclude module: 'spring-boot-starter-logging'
    jcpJSLWebBridgeImplementation.exclude module: 'spring-boot-starter-logging'
    jcpFEImplementation.exclude module: 'spring-boot-starter-logging'
    jcpAllImplementation.exclude module: 'spring-boot-starter-logging'

    jcpDBAPIsCompileOnly.extendsFrom jcpDBCompileOnly
    jcpDBAPIsAnnotationProcessor.extendsFrom jcpDBAnnotationProcessor
    jcpDBFECompileOnly.extendsFrom jcpDBCompileOnly
    jcpDBFEAnnotationProcessor.extendsFrom jcpDBAnnotationProcessor
}

dependencies {
    def excludeSwagger = {
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.swagger', module: 'swagger-models'
    }

    // JCP Commons
    if (!project.ext.get("deps.jospJSLDisabled"))
        jcpCommonsImplementation "com.robypomper.josp:jospJSL:${project.ext.get("version.jospJSL")}"
    jcpCommonsImplementation "org.apache.tomcat.embed:tomcat-embed-core:${project.ext.get("version.tomcat")}"
    jcpCommonsImplementation "org.springframework:spring-context"
    // Spring Boot Context (required by JCP's clients)
    jcpCommonsImplementation "org.springframework:spring-beans"
    // Spring Boot Beans (required by JCP's clients)
    jcpCommonsImplementation "org.springframework:spring-web"

    // JCP DB
    if (!project.ext.get("deps.jcpCommonsDisabled"))
        jcpDBImplementation "com.robypomper.josp:jcpCommons:${project.ext.get("version.jcpCommons")}"
    jcpDBImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Spring Boot Data
    jcpDBImplementation 'mysql:mysql-connector-java'
    // MySQL
    jcpDBCompileOnly "org.projectlombok:lombok:${project.ext.get("version.lombok")}"
    // Lombok annotations
    jcpDBAnnotationProcessor "org.projectlombok:lombok:${project.ext.get("version.lombok")}"

    // JCP DB APIs
    if (!project.ext.get("deps.jcpDBDisabled"))
        jcpDBAPIsImplementation "com.robypomper.josp:jcpDB:${project.ext.get("version.jcpDB")}"

    // JCP DB FE
    if (!project.ext.get("deps.jcpDBDisabled"))
        jcpDBFEImplementation "com.robypomper.josp:jcpDB:${project.ext.get("version.jcpDB")}"

    // JCP Service
    if (!project.ext.get("deps.jcpCommonsDisabled"))
        jcpServiceImplementation "com.robypomper.josp:jcpCommons:${project.ext.get("version.jcpCommons")}"
    jcpServiceImplementation 'org.springframework.boot:spring-boot-starter-web'
    // Spring Boot Web
    jcpServiceCompileOnly 'org.springframework.boot:spring-boot-devtools'
    // Spring Boot DevTools
    jcpServiceImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
    // Spring Boot Logger
    jcpServiceImplementation 'org.springframework.boot:spring-boot-starter-security'
    // Spring Boot SSL support
    jcpServiceImplementation 'org.springframework.security:spring-security-oauth2-client'
    // Spring Boot OAuth (Client)
    jcpServiceImplementation 'org.springframework.security:spring-security-oauth2-resource-server'
    // Spring Boot OAuth (Resource Server)
    jcpServiceImplementation 'org.springframework.security:spring-security-oauth2-jose'
    // Spring Boot OAuth (JSON messages)
    jcpServiceImplementation 'org.keycloak:keycloak-spring-boot-starter'
    // Keycloak 4 Spring Boot
    jcpServiceImplementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${project.ext.get("version.jackson")}"
    // Jackson 4 Hibernate5jcpAPIsImplementation "io.springfox:springfox-swagger2:${project.ext.get("version.swaggerSpring")}", excludeSwagger // Swagger support
    jcpServiceImplementation "io.springfox:springfox-swagger2:${project.ext.get("version.swaggerSpring")}", excludeSwagger
    // Swagger 4 Spring Boot
    jcpServiceImplementation "io.springfox:springfox-swagger-ui:${project.ext.get("version.swaggerSpring")}", excludeSwagger
    // Swagger 4 Spring Boot
    jcpServiceImplementation "io.swagger:swagger-models:${project.ext.get("version.swagger")}"
    // Swagger Model
    jcpServiceImplementation "io.swagger:swagger-annotations:${project.ext.get("version.swagger")}"
    // Swagger Annotations
    jcpServiceCompileOnly "org.projectlombok:lombok:${project.ext.get("version.lombok")}"
    // Lombok annotations for Swagger docs
    jcpServiceAnnotationProcessor "org.projectlombok:lombok:${project.ext.get("version.lombok")}"
    jcpServiceImplementation "jakarta.persistence:jakarta.persistence-api:${project.ext.get("version.jakarta")}"
    // Swagger Annotations
    jcpServiceImplementation "org.hibernate:hibernate-core:${project.ext.get("version.hibernate")}"
    // Swagger Annotations

    // JCP APIs
    if (!project.ext.get("deps.jcpServiceDisabled"))
        jcpAPIsImplementation "com.robypomper.josp:jcpService:${project.ext.get("version.jcpService")}"
    if (!project.ext.get("deps.jcpDBAPIsDisabled"))
        jcpAPIsImplementation "com.robypomper.josp:jcpDBAPIs:${project.ext.get("version.jcpDBAPIs")}"

    // JCP GWs
    if (!project.ext.get("deps.jcpServiceDisabled"))
        jcpGWsImplementation "com.robypomper.josp:jcpService:${project.ext.get("version.jcpService")}"
    if (!project.ext.get("deps.jcpDBAPIsDisabled"))
        jcpGWsImplementation "com.robypomper.josp:jcpDBAPIs:${project.ext.get("version.jcpDBAPIs")}"

    // JCP JSL Web Bridge
    if (!project.ext.get("deps.jcpServiceDisabled"))
        jcpJSLWebBridgeImplementation "com.robypomper.josp:jcpService:${project.ext.get("version.jcpService")}"

    // JCP FE
    if (!project.ext.get("deps.jcpServiceDisabled"))
        jcpFEImplementation "com.robypomper.josp:jcpService:${project.ext.get("version.jcpService")}"
    if (!project.ext.get("deps.jcpDBFEDisabled"))
        jcpFEImplementation "com.robypomper.josp:jcpDBFE:${project.ext.get("version.jcpDBFE")}"

    // JCP All
    if (!project.ext.get("deps.jcpAPIsDisabled"))
        jcpAllImplementation "com.robypomper.josp:jcpAPIs:${project.ext.get("version.jcpAPIs")}"
    if (!project.ext.get("deps.jcpGWsDisabled"))
        jcpAllImplementation "com.robypomper.josp:jcpGWs:${project.ext.get("version.jcpGWs")}"
    if (!project.ext.get("deps.jcpJSLWebBridgeDisabled"))
        jcpAllImplementation "com.robypomper.josp:jcpJSLWebBridge:${project.ext.get("version.jcpJSLWebBridge")}"
    if (!project.ext.get("deps.jcpFEDisabled"))
        jcpAllImplementation "com.robypomper.josp:jcpFE:${project.ext.get("version.jcpFE")}"

}

GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpCommons, (String) project.ext.get("version.jcpCommons_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpDB, (String) project.ext.get("version.jcpDB_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpDBAPIs, (String) project.ext.get("version.jcpDBAPIs_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpDBFE, (String) project.ext.get("version.jcpDBFE_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpService, (String) project.ext.get("version.jcpService_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpAPIs, (String) project.ext.get("version.jcpAPIs_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpGWs, (String) project.ext.get("version.jcpGWs_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpJSLWebBridge, (String) project.ext.get("version.jcpJSLWebBridge_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpFE, (String) project.ext.get("version.jcpFE_DEV"))
GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jcpAll, (String) project.ext.get("version.jcpAll_DEV"))


// -------------
// Runners Tasks
// -------------

// Utils
task printGradleVersions(type: PrintGradleVersion)

// JCP APIs
SpringBuildUtils.makeSpringBootFromSourceSet(project, sourceSets.jcpAPIs, project.file('src/jcpApis/resources/log4j2_project.xml'), 'dev,auth,db-apis,ssl ')
tasks.bootJcpAPIsRun {
    workingDir('envs/runnables/jcpAPIs')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpAPIs_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpAPIsRun
}
task jcpAPIs_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "envs/runnables/jcpAPIs"

    //...delete and recreate jcp_api database in dbms
}
clean.dependsOn jcpAPIs_Clean
bootJcpAPIsRun.dependsOn printGradleVersions

// JCP GWs
SpringBuildUtils.makeSpringBootFromSourceSet(project, sourceSets.jcpGWs, project.file('src/jcpGWs/resources/log4j2_project.xml'), 'dev,auth,db-apis,ssl')
tasks.bootJcpGWsRun {
    workingDir('envs/runnables/jcpGWs')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpGWs_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpGWsRun
}
task jcpGWs_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "envs/runnables/jcpGWs"

    //...delete and recreate jcp_api database in dbms
}
clean.dependsOn jcpGWs_Clean
bootJcpGWsRun.dependsOn printGradleVersions

// JCP JSL Web Bridge
SpringBuildUtils.makeSpringBootFromSourceSet(project, sourceSets.jcpJSLWebBridge, project.file('src/jcpJSLWebBridge/resources/log4j2_project.xml'), 'dev,auth,data-none,ssl,cors,sessions')
tasks.bootJcpJSLWebBridgeRun {
    workingDir('envs/runnables/jcpJSLWebBridge')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpJSLWebBridge_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpJSLWebBridgeRun
}
task jcpJSLWebBridge_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "envs/runnables/jcpJSLWebBridge"

    //...delete and recreate jcp_api database in dbms
}
clean.dependsOn jcpJSLWebBridge_Clean
bootJcpJSLWebBridgeRun.dependsOn printGradleVersions

// JCP FE
SpringBuildUtils.makeSpringBootFromSourceSet(project, sourceSets.jcpFE, project.file('src/jcpFE/resources/log4j2_project.xml'), 'dev,auth,db-fe,ssl')
tasks.bootJcpFERun {
    workingDir('envs/runnables/jcpFE')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpFE_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpFERun
}
task jcpFE_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete 'envs/runnables/jcpFE'

    //...delete and recreate jcp_fe database in dbms
}
clean.dependsOn jcpFE_Clean
bootJcpFERun.dependsOn printGradleVersions

// JCP FE Static
NodeBuildUtils.makeNodeFromSourceSet(project, sourceSets.jcpFE.getName(), file("${project.projectDir}/src/jcpFE/js/node"))
task processJcpFEResourcesNpm(type: Copy) {
    dependsOn tasks.nodeJcpFEBuild // ex: processJcpFEResourcesNpmBuild

    from "${project.projectDir}/src/jcpFE/js/node/build"
    into "${project.projectDir}/build/generated/resources/node/jcpFE/public"
}
tasks.processJcpFEResources.dependsOn tasks.processJcpFEResourcesNpm
task jcpFEStatic_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn nodeJcpFERun
}
task jcpFEStatic_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "${project.projectDir}/src/jcpFE/js/node/build"
    delete "${project.projectDir}/src/jcpFE/js/node/node_modules"
}
clean.dependsOn tasks.jcpFEStatic_Clean
nodeJcpFERun.dependsOn printGradleVersions


//npm_install {
//    args = [
//            //'tabler-react',
//            //'react-table',
//
//            'react',
//            'react-dom',
//            //'react-scripts',
//            //'react-bootstrap','bootstrap',
//
//            //'@testing-library/jest-dom',
//            //'@testing-library/react',
//            //'@testing-library/user-event',
//            //'web-vitals',
//            //'mdbreact',
//            //'react-router-dom'
//    ]
//    //npm install react          --legacy-peer-deps react-admin
//    //npm install --save-dev react-scripts
//
//    //npm install tabler-react react-table
//}
//task processJcpFEResourcesNPMDevModules(type: NpmTask) {
//    // install the express package only
//    args = ['install', '--save-dev',
//            '@babel/cli',
//            '@babel/preset-env',
//            '@babel/preset-react',
//            'babel-loader',
//            'webpack',
//            'webpack-cli'
//    ]
//    //npm install --save-dev webpack webpack-cli webpack-dev-server @babel/core @babel/plugin-transform-async-to-generator @babel/plugin-transform-runtime @babel/preset-env @babel/preset-react babel-loader html-webpack-plugin style-loader css-loader extract-text-webpack-plugin@next
//}
//tasks.npm_install.dependsOn tasks.processJcpFEResourcesNPMDevModules
//
//task processJcpFEResourcesNPMModules(type: Copy) {
//    from "${project.projectDir}/src/jcpFE/js/node/node_modules"
//    into "${project.projectDir}/build/generated/resources/node/jcpFE/public/node_modules"
//}
//task processJcpFEResourcesBabel(type: NpxTask) {
//    dependsOn tasks.npmInstall
//    dependsOn tasks.npm_install
//    dependsOn tasks.processJcpFEResourcesNPMModules
//
//    command = 'babel'
//    environment = ['NODE_ENV': "development"]       // or test or production
//    args = ["${project.projectDir}/src/jcpFE/js/src", '--out-dir', "${project.projectDir}/build/generated/resources/node/jcpFE/public", '--presets', '@babel/preset-react']
//}
////tasks.processJcpFEResources.dependsOn tasks.processJcpFEResourcesBabel
//
//task processJcpFEResourcesNpmBuild(type: NpmTask) {
//    dependsOn tasks.npm_install
//    dependsOn tasks.npmInstall
//
//    //command = 'create-react-app'
//    //environment = ['NODE_ENV': "development"]       // or test or production
//    //args = ['jcp-fe-static']
//    //command = 'react-scripts'
//    //environment = ['NODE_ENV': "dev"]       // or test or production
//    //args = ['build']
//    npmCommand = ['run', 'build']
//    //command = 'webpack'
//    //args = ['--mode=development']
//}
//task processJcpFEResourcesNpmCopy(type: Copy) {
//    dependsOn tasks.processJcpFEResourcesNpmBuild
//
//    from "${project.projectDir}/src/jcpFE/js/node/build"
//    into "${project.projectDir}/build/generated/resources/node/jcpFE/public"
//}
//tasks.processJcpFEResources.dependsOn tasks.processJcpFEResourcesNpmCopy
//
//// BABEL -> NPM MODULES
////       -> (NPM INSTALL (both))
//// [JCP FE RESOURCES] -> NPM COPY -> NPM BUILD -> NPM INSTALL (both) -> NPM DEV MODULES



// JCP All
SpringBuildUtils.makeSpringBootFromSourceSet(project, sourceSets.jcpAll, project.file('src/jcpAll/resources/log4j2_project.xml'), 'dev,auth,db-all,ssl')
tasks.bootJcpAllRun {
    workingDir('envs/runnables/jcpAll')
    doFirst {
        workingDir.mkdirs()
    }
}
task jcpAll_Start {
    description = 'Runs...'
    group = 'JOSP runners jcp (soft)'
    dependsOn bootJcpAllRun
}
task jcpAll_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete 'envs/runnables/jcpAll'

    //...delete and recreate jcp_api database in dbms
}
clean.dependsOn jcpAll_Clean
bootJcpAllRun.dependsOn printGradleVersions


// -------------------
// Publication configs
// -------------------

// JCP Commons
String jcpCommonsName = 'JCP Commons'
String jcpCommonsArtifact = 'jcpCommons'
String jcpCommonsVersion = project.ext.get("version.jcpCommons_DEV")
def jcpCommonsPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpCommons, jcpCommonsName, jcpCommonsArtifact, jcpCommonsVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpCommonsPubDesc)

// JCP DB
String jcpDBName = 'JCP DB'
String jcpDBArtifact = 'jcpDB'
String jcpDBVersion = project.ext.get("version.jcpDB_DEV")
def jcpDBPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpDB, jcpDBName, jcpDBArtifact, jcpDBVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp.db")
JavaPublicationUtils.generatePublication(project, jcpDBPubDesc)

// JCP DB APIs
String jcpDBAPIsName = 'JCP DB APIs'
String jcpDBAPIsArtifact = 'jcpDBAPIs'
String jcpDBAPIsVersion = project.ext.get("version.jcpDBAPIs_DEV")
def jcpDBAPIsPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpDBAPIs, jcpDBAPIsName, jcpDBAPIsArtifact, jcpDBAPIsVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp.db")
JavaPublicationUtils.generatePublication(project, jcpDBAPIsPubDesc)

// JCP DB FE
String jcpDBFEName = 'JCP DB FE'
String jcpDBFEArtifact = 'jcpDBFE'
String jcpDBFEVersion = project.ext.get("version.jcpDBFE_DEV")
def jcpDBFEPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpDBFE, jcpDBFEName, jcpDBFEArtifact, jcpDBFEVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp.db")
JavaPublicationUtils.generatePublication(project, jcpDBFEPubDesc)

// JCP Service
String jcpServiceName = 'JCP Service'
String jcpServiceArtifact = 'jcpService'
String jcpServiceVersion = project.ext.get("version.jcpService_DEV")
def jcpServicePubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpService, jcpServiceName, jcpServiceArtifact, jcpServiceVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpServicePubDesc)

// JCP APIs
String jcpAPIsName = 'JCP APIs'
String jcpAPIsArtifact = 'jcpAPIs'
String jcpAPIsVersion = project.ext.get("version.jcpAPIs_DEV")
def jcpAPIsPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpAPIs, jcpAPIsName, jcpAPIsArtifact, jcpAPIsVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpAPIsPubDesc)

// JCP GWs
String jcpGWsName = 'JCP GWs'
String jcpGWsArtifact = 'jcpGWs'
String jcpGWsVersion = project.ext.get("version.jcpGWs_DEV")
def jcpGWsPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpGWs, jcpGWsName, jcpGWsArtifact, jcpGWsVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpGWsPubDesc)

// JCP JSL Web Bridge
String jcpJSLWebBridgeName = 'JCP JSL Web Bridge'
String jcpJSLWebBridgeArtifact = 'jcpJSLWebBridge'
String jcpJSLWebBridgeVersion = project.ext.get("version.jcpJSLWebBridge_DEV")
def jcpJSLWebBridgePubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpJSLWebBridge, jcpJSLWebBridgeName, jcpJSLWebBridgeArtifact, jcpJSLWebBridgeVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpJSLWebBridgePubDesc)

// JCP FE
String jcpFEName = 'JCP Front End'
String jcpFEArtifact = 'jcpFE'
String jcpFEVersion = project.ext.get("version.jcpFE_DEV")
def jcpFEPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpFE, jcpFEName, jcpFEArtifact, jcpFEVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpFEPubDesc)

// JCP All
String jcpAllName = 'JCP All'
String jcpAllArtifact = 'jcpAll'
String jcpAllVersion = project.ext.get("version.jcpAll_DEV")
def jcpAllPubDesc = new JavaPublicationUtils.Descriptor(project, sourceSets.jcpAll, jcpAllName, jcpAllArtifact, jcpAllVersion)
        .setUrlsFromProject(project)
        .setLicenceAGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
        .setGroupId((String) project.getGroup() + ".jcp")
JavaPublicationUtils.generatePublication(project, jcpAllPubDesc)


// -----------------
// Publication tasks
// -----------------

task jcp_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    tasks.all_PublishToLocal.dependsOn jcp_PublishToLocal
}

// JCP Commons
task jcpCommons_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpCommonsPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpCommons_PublishToLocal
}

// JCP DB
task jcpDB_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpDBPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpDB_PublishToLocal
}

// JCP DB APIs
task jcpDBAPIs_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpDBAPIsPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpDBAPIs_PublishToLocal
}

// JCP DB FE
task jcpDBFE_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpDBFEPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpDBFE_PublishToLocal
}

// JCP Service
task jcpService_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpServicePublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpService_PublishToLocal
}

// JCP APIs
task jcpAPIs_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpAPIsPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpAPIs_PublishToLocal
}

// JCP GWs
task jcpGWs_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpGWsPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpGWs_PublishToLocal
}

// JCP JSL Web Bridge
task jcpJSLWebBridge_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpJSLWebBridgePublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpJSLWebBridge_PublishToLocal
}

// JCP FE
task jcpFE_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpFEPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpFE_PublishToLocal
}

// JCP All
task jcpAll_PublishToLocal {
    description = 'Publish...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJcpAllPublicationToMavenLocal
    tasks.jcp_PublishToLocal.dependsOn jcpAll_PublishToLocal
}
