/*******************************************************************************
 * The John Cloud Platform set of infrastructure and software required to provide
 * the "cloud" to an IoT EcoSystem, like the John Operating System Platform one.
 * Copyright 2020 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 ******************************************************************************/

import com.robypomper.build.java.JavaPublicationUtils

import java.text.SimpleDateFormat

// --------------------------
// Jar Tasks for publications
// --------------------------

// JCP API
def jcpAPIsName = 'JOSP Cloud Platform API'
def jcpAPIsArtifact = 'jcpAPIs'
def jcpAPIsVersion = '2.0.0'

task jcpAPIsJar(type: Jar) {
    doFirst {
        archivesBaseName = jcpAPIsArtifact;
    }

    // JOD source code
    from sourceSets.jcpAPIs.output
    // JOSP Commons and JCP APIs Public
    from {
        sourceSets.jcpAPIs.runtimeClasspath.collect {
            if (!it.exists()) return
            if (!it.isDirectory()) return
            it
        } }

    manifest {
        attributes 'Implementation-Title'   : jcpAPIsName,
                'Implementation-Version'    : jcpAPIsVersion,
                //'Class-Path'                : sourceSets.jcpFE_Extended.runtimeClasspath.collect { "libs/" + it.getName() }.join(' '),
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                //'Build-Revision'            : versioning.info.commit,
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

task jcpAPIsDocs(type: Javadoc) {
    source sourceSets.jcpAPIs.allJava
    classpath += sourceSets.jcpAPIs.runtimeClasspath
    classpath += sourceSets.jcpAPIs.compileClasspath
}

task jcpAPIsDocsJar(type: Jar) {
    classifier = 'doc'
    doFirst {
        archivesBaseName = jcpAPIsArtifact;
    }

    from jcpAPIsDocs

    manifest {
        attributes 'Implementation-Title'   : jcpAPIsName + " - Docs",
                'Implementation-Version'    : jcpAPIsVersion,
                //'Class-Path'                : sourceSets.jcpFE_Extended.runtimeClasspath.collect { "libs/" + it.getName() }.join(' '),
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                //'Build-Revision'            : versioning.info.commit,
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

task jcpAPIsSrcJar(type: Jar) {
    classifier = 'src'
    doFirst {
        archivesBaseName = jcpAPIsArtifact;
    }

    from sourceSets.jcpAPIs.allSource

    manifest {
        attributes 'Implementation-Title'   : jcpAPIsName + " - Sources",
                'Implementation-Version'    : jcpAPIsVersion,
                //'Class-Path'                : sourceSets.jcpFE_Extended.runtimeClasspath.collect { "libs/" + it.getName() }.join(' '),
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                //'Build-Revision'            : versioning.info.commit,
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

// JCP API Public
def jcpAPIsPublicName = 'JOSP Cloud Platform Public Library'
def jcpAPIsPublicArtifact = 'jcpAPIsPublic'
def jcpAPIsPublicVersion = '2.0.0'

task jcpAPIsPublicJar(type: Jar) {
    doFirst {
        archivesBaseName = jcpAPIsPublicArtifact;
    }

    // JOD source code
    from sourceSets.jcpAPIsPublic.output
    // JOSP Commons and JCP APIs Public
    from {
        sourceSets.jcpAPIsPublic.runtimeClasspath.collect {
            if (!it.exists()) return
            if (!it.isDirectory()) return
            it
        } }

    manifest {
        attributes 'Implementation-Title'   : jcpAPIsPublicName,
                'Implementation-Version'    : jcpAPIsPublicVersion,
                //'Class-Path'                : sourceSets.jcpFE_Extended.runtimeClasspath.collect { "libs/" + it.getName() }.join(' '),
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                //'Build-Revision'            : versioning.info.commit,
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

task jcpAPIsPublicDocs(type: Javadoc) {
    source sourceSets.jcpAPIsPublic.allJava
    classpath += sourceSets.jcpAPIsPublic.runtimeClasspath
    classpath += sourceSets.jcpAPIsPublic.compileClasspath
    //classpath += sourceSets.jcpAPIs.runtimeClasspath
    //classpath += sourceSets.jcpAPIs.compileClasspath
}

task jcpAPIsPublicDocsJar(type: Jar) {
    classifier = 'doc'
    doFirst {
        archivesBaseName = jcpAPIsPublicArtifact;
    }

    from jcpAPIsPublicDocs

    manifest {
        attributes 'Implementation-Title'   : jcpAPIsPublicName + " - Docs",
                'Implementation-Version'    : jcpAPIsPublicVersion,
                //'Class-Path'                : sourceSets.jcpFE_Extended.runtimeClasspath.collect { "libs/" + it.getName() }.join(' '),
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                //'Build-Revision'            : versioning.info.commit,
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

task jcpAPIsPublicSrcJar(type: Jar) {
    classifier = 'src'
    doFirst {
        archivesBaseName = jcpAPIsPublicArtifact;
    }

    from sourceSets.jcpAPIsPublic.allSource

    manifest {
        attributes 'Implementation-Title'   : jcpAPIsPublicName + " - Sources",
                'Implementation-Version'    : jcpAPIsPublicVersion,
                //'Class-Path'                : sourceSets.jcpFE_Extended.runtimeClasspath.collect { "libs/" + it.getName() }.join(' '),
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                //'Build-Revision'            : versioning.info.commit,
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

// JCP FE
def jcpFEName = 'JOSP Cloud Platform FrontEnd'
def jcpFEArtifact = 'jcpFE'
def jcpFEVersion = '2.0.0'

task jcpFEJar(type: Jar) {
    doFirst {
        archivesBaseName = jcpFEArtifact;
    }

    // JOD source code
    from sourceSets.jcpFE.output
    // JOSP Commons and JCP APIs Public
    from {
        sourceSets.jcpFE.runtimeClasspath.collect {
            if (!it.exists()) return
            if (!it.isDirectory()) return
            it
        } }

    manifest {
        attributes 'Implementation-Title': jcpFEName,
                'Implementation-Version': jcpFEVersion,
                'Main-Class': 'com.robypomper.josp.jcpfe.ServiceApplication'
    }
}

task jcpFEDocs(type: Javadoc) {
    source sourceSets.jcpFE.allJava
    classpath += sourceSets.jcpFE.runtimeClasspath
    classpath += sourceSets.jcpFE.compileClasspath
}

task jcpFEDocsJar(type: Jar) {
    classifier = 'doc'
    doFirst {
        archivesBaseName = jcpFEArtifact;
    }

    from jcpFEDocs

    manifest {
        attributes 'Implementation-Title': jcpFEName + " - Docs",
                'Implementation-Version': jcpFEVersion
    }
}

task jcpFESrcJar(type: Jar) {
    classifier = 'src'
    doFirst {
        archivesBaseName = jcpFEArtifact;
    }

    from sourceSets.jcpFE.allSource

    manifest {
        attributes 'Implementation-Title': jcpFEName + " - Sources",
                'Implementation-Version': jcpFEVersion
    }
}


// ------------
// Publications
// ------------

publishing {
    publications {

        // JCP APIs
        jcpAPIs(MavenPublication) {
            groupId = project.group
            artifactId = jcpAPIsArtifact
            version = jcpAPIsVersion

            artifact tasks.jcpAPIsJar
            artifact tasks.jcpAPIsSrcJar
            artifact tasks.jcpAPIsDocsJar

            JavaPublicationUtils.initPom(pom, jcpAPIsName, 'The JCP APIs', projectUrl, projectGit, projectGitUrl, "AGPLv3", "https://www.gnu.org/licenses/agpl-3.0.html")
            JavaPublicationUtils.injectDependenciesToPom(pom, configurations.jcpAPIsImplementation, true)
        }

        // JCP APIs Public
        jcpAPIsPublic(MavenPublication) {
            groupId = project.group
            artifactId = jcpAPIsPublicArtifact
            version = jcpAPIsPublicVersion

            artifact tasks.jcpAPIsPublicJar
            artifact tasks.jcpAPIsPublicSrcJar
            artifact tasks.jcpAPIsPublicDocsJar

            JavaPublicationUtils.initPom(pom, jcpAPIsPublicName, 'The JCP APIs Public Library', projectUrl, projectGit, projectGitUrl, "AGPLv3", "https://www.gnu.org/licenses/agpl-3.0.html")
            JavaPublicationUtils.injectDependenciesToPom(pom, configurations.jcpAPIsPublicImplementation, true)
        }

        // JCP FE
        jcpFE(MavenPublication) {
            groupId = project.group
            artifactId = jcpFEArtifact
            version = jcpFEVersion

            artifact tasks.jcpFEJar
            artifact tasks.jcpFESrcJar
            artifact tasks.jcpFEDocsJar

            JavaPublicationUtils.initPom(pom, jcpAPIsName, 'The JCP Front End', projectUrl, projectGit, projectGitUrl, "AGPLv3", "https://www.gnu.org/licenses/agpl-3.0.html")
            JavaPublicationUtils.injectDependenciesToPom(pom, configurations.jcpFEImplementation, true)
        }

    }
}
